<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1471132981629">{:repl-history {:ide [], :local [&quot;(def word \&quot;nottingham\&quot;)&quot; &quot;(word)&quot; &quot;(print word)&quot; &quot;(require '[clojure.string :as str])&quot; &quot;()&quot; &quot;(str word)&quot; &quot;(str/starts-with? \&quot;not\&quot; word)&quot; &quot;(str/starts-with? word \&quot;not\&quot;)&quot; &quot;(str \&quot;i live in\&quot; word)&quot; &quot;(-main)&quot; &quot;(defn missiingCharacter [word, om] (str \&quot;Eample of Missing Character --&gt; \&quot;\n                                        (def front (subs word 0 om))\n                                        (def back (subs word (+ om 1)))\n                                        (str front back)))&quot; &quot;(def word \&quot;reverse\&quot;)&quot; &quot;(def first (sub word 0,1))&quot; &quot;(def one (sub word 0,1))&quot; &quot;(def one (subs word 0,1))&quot; &quot;one&quot; &quot;(def last (subs (count word)))&quot; &quot;(def final (subs (count word)))&quot; &quot;(def final (subs word (count word)))&quot; &quot;(def final (subs word (-(count word)1)))&quot; &quot;(def letter \&quot;a\&quot;)&quot; &quot;(= (count letter) 0)&quot; &quot;(= (count letter) 1)&quot; &quot;(= (count letter) -1)&quot; &quot;(count letter)&quot; &quot;(if (= (count letter)1)(str \&quot;correct\&quot;)(str \&quot;not correct\&quot;))&quot; &quot;(def letter2 \&quot;sol\&quot;)&quot; &quot;(count letter2)&quot; &quot;(def front (subs 0,3))\n(if (= (count word) 3)\n  (str word) (str front front front))&quot; &quot;(def front (subs letter 0,3))\n(if (= (count letter) 3)\n  (str letter) (str front front front))&quot; &quot;(def word \&quot;Leinigen\&quot;)&quot; &quot;(def front (subs word 0,3))\n(if (= (count word) 3)\n  (str word) (str front front front))&quot; &quot;(= (count word) \&quot;n\&quot;)&quot; &quot;(= \&quot;n\&quot; (count word))&quot; &quot;(count word)&quot; &quot;(count word -1)&quot; &quot;(- (count word)1)&quot; &quot;(= (- (count word)1) \&quot;n\&quot;)&quot; &quot;(= \&quot;n\&quot; (- (count word)1))&quot; &quot;(def lastChar (subs word (- (count word) 1)))&quot; &quot;lastChar&quot; &quot;word&quot; &quot;letter&quot; &quot;(if (&lt;= (count letter) 1)\n  (str \&quot;Example of Front Back --&gt; \&quot; letter)\n  (str \&quot;Example of Front Back --&gt; \&quot; final mid one))&quot; &quot;(def one (subs word 0, 1))\n(def mid (subs word 1, (- (count word) 1)))\n(def final (subs word (- (count word) 1)))\n(if (&lt;= (count word) 1)\n  (str \&quot;Example of Front Back --&gt; \&quot; word)\n  (str \&quot;Example of Front Back --&gt; \&quot; final mid one))&quot; &quot;(frontBack \&quot;a\&quot;)&quot; &quot;(frontBack \&quot;b\&quot;)&quot; &quot;(frontBack \&quot;ba\&quot;)&quot; &quot;mid&quot; &quot;final&quot; &quot;letter2&quot; &quot;word &quot; &quot;keyword&quot; &quot;(def test \&quot;swagging\&quot;)&quot;], :remote []}}</component>
</project>